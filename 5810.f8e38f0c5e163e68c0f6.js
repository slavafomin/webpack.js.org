(self.webpackChunk=self.webpackChunk||[]).push([[5810],{5810:function(n,a,s){"use strict";s.r(a),a.default='<p>If <a href="/concepts/hot-module-replacement">Hot Module Replacement</a> has been enabled via the <a href="/plugins/hot-module-replacement-plugin"><code>HotModuleReplacementPlugin</code></a>, its interface will be exposed under the <a href="/api/module-variables/#modulehot-webpack-specific"><code>module.hot</code> property</a>. Typically, users will check to see if the interface is accessible, then begin working with it. As an example, here\'s how you might <code>accept</code> an updated module:</p> <pre><code class="hljs language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">\'./library.js\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something with the updated library module...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>The following methods are supported...</p> <h2 id="module-api">Module API<a href="#module-api" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="accept"><code>accept</code><a href="#accept" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Accept updates for the given <code>dependencies</code> and fire a <code>callback</code> to react to those updates.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>\n  dependencies<span class="token punctuation">,</span> <span class="token comment">// Either a string or an array of strings</span>\n  callback <span class="token comment">// Function to fire when the dependencies are updated</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>When using ESM <code>import</code> all imported symbols from <code>dependencies</code> are automatically updated. Note: The dependency string must match exactly with the <code>from</code> string in the <code>import</code>. In some cases <code>callback</code> can even be omitted. Using <code>require()</code> in the <code>callback</code> doesn\'t make sense here.</p> <p>When using CommonJS you need to update dependencies manually by using <code>require()</code> in the <code>callback</code>. Omitting the <code>callback</code> doesn\'t make sense here.</p> <h3 id="accept-self"><code>accept</code> (self)<a href="#accept-self" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Accept updates for itself.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>\n  errorHandler <span class="token comment">// Function to handle errors when evaluating the new version</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>When this module or dependencies are updated, this module can be disposed and re-evaluated without informing parents. This makes sense if this module has no exports (or exports are updated in another way).</p> <p>The <code>errorHandler</code> is fired when the evaluation of this module (or dependencies) has thrown an exception.</p> <h3 id="decline"><code>decline</code><a href="#decline" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Reject updates for the given <code>dependencies</code> forcing the update to fail with a <code>\'decline\'</code> code.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">decline</span><span class="token punctuation">(</span>\n  dependencies <span class="token comment">// Either a string or an array of strings</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>Flag a dependency as not-update-able. This makes sense when changing exports of this dependency can\'t be handled or handling is not implemented yet. Depending on your HMR management code, an update to these dependencies (or unaccepted dependencies of it) usually causes a full-reload of the page.</p> <h3 id="decline-self"><code>decline</code> (self)<a href="#decline-self" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Reject updates for itself.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">decline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>Flag this module as not-update-able. This makes sense when this module has irreversible side-effects, or HMR handling is not implemented for this module yet. Depending on your HMR management code, an update to this module (or unaccepted dependencies) usually causes a full-reload of the page.</p> <h3 id="dispose-or-adddisposehandler"><code>dispose</code> (or <code>addDisposeHandler</code>)<a href="#dispose-or-adddisposehandler" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Add a handler which is executed when the current module code is replaced. This should be used to remove any persistent resource you have claimed or created. If you want to transfer state to the updated module, add it to the given <code>data</code> parameter. This object will be available at <code>module.hot.data</code> after the update.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Clean up and pass data to the updated module...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="invalidate"><code>invalidate</code><a href="#invalidate" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Calling this method will invalidate the current module, which disposes and recreates it when the HMR update is applied. This bubbles like a normal update of this module. <code>invalidate</code> can\'t be self-accepted by this module.</p> <p>When called during the <code>idle</code> state, a new HMR update will be created containing this module. HMR will enter the <code>ready</code> state.</p> <p>When called during the <code>ready</code> or <code>prepare</code> state, this module will be added to the current HMR update.</p> <p>When called during the <code>check</code> state, this module will be added to the update when an update is available. If no update is available it will create a new update. HMR will enter the <code>ready</code> state.</p> <p>When called during the <code>dispose</code> or <code>apply</code> state, HMR will pick it up after getting out of those states.</p> <h3 id="use-cases">Use Cases<a href="#use-cases" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><strong>Conditional Accepting</strong></p> <p>A module can accept a dependency, but can call <code>invalidate</code> when the change of the dependency is not handleable:</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./dep\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> processX<span class="token punctuation">,</span> processY <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'anotherDep\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> oldY <span class="token operator">=</span> y<span class="token punctuation">;</span>\n\n<span class="token function">processX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">processY</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">\'./dep\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">!==</span> oldY<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// This can\'t be handled, bubble to parent</span>\n    module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// This can be handled</span>\n  <span class="token function">processX</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>Conditional self accept</strong></p> <p>A module can self-accept itself, but can invalidate itself when the change is not handleable:</p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> <span class="token constant">VALUE</span> <span class="token operator">=</span> <span class="token string">\'constant\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">VALUE</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span>data <span class="token operator">&#x26;&#x26;</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span>data<span class="token punctuation">.</span>value <span class="token operator">&#x26;&#x26;</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span>data<span class="token punctuation">.</span>value <span class="token operator">!==</span> <span class="token constant">VALUE</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token constant">VALUE</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p><strong>Triggering custom HMR updates</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> moduleId <span class="token operator">=</span> <span class="token function">chooseAModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> code <span class="token operator">=</span> __webpack_modules__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n__webpack_modules__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">makeChanges</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  require<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  module<span class="token punctuation">.</span><span class="token function">hot</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>When <code>invalidate</code> is called, the <a href="#dispose-or-adddisposehandler"><code>dispose</code></a> handler will be eventually called and fill <code>module.hot.data</code>. If <a href="#dispose-or-adddisposehandler"><code>dispose</code></a> handler is not registered, an empty object will be supplied to <code>module.hot.data</code>.</p></aside> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>Do not get caught in an <code>invalidate</code> loop, by calling <code>invalidate</code> again and again. This will result in stack overflow and HMR entering the <code>fail</code> state.</p></aside> <h3 id="removedisposehandler"><code>removeDisposeHandler</code><a href="#removedisposehandler" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Remove the handler added via <code>dispose</code> or <code>addDisposeHandler</code>.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">removeDisposeHandler</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="management-api">Management API<a href="#management-api" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="status"><code>status</code><a href="#status" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Retrieve the current status of the hot module replacement process.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Will return one of the following strings...</span></code></pre> <table> <thead> <tr> <th>Status</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Status"><span>idle</span></td> <td data-th="Description"><span>The process is waiting for a call to <code>check</code> (see below)</span></td> </tr> <tr> <td data-th="Status"><span>check</span></td> <td data-th="Description"><span>The process is checking for updates</span></td> </tr> <tr> <td data-th="Status"><span>prepare</span></td> <td data-th="Description"><span>The process is getting ready for the update (e.g. downloading the updated module)</span></td> </tr> <tr> <td data-th="Status"><span>ready</span></td> <td data-th="Description"><span>The update is prepared and available</span></td> </tr> <tr> <td data-th="Status"><span>dispose</span></td> <td data-th="Description"><span>The process is calling the <code>dispose</code> handlers on the modules that will be replaced</span></td> </tr> <tr> <td data-th="Status"><span>apply</span></td> <td data-th="Description"><span>The process is calling the <code>accept</code> handlers and re-executing self-accepted modules</span></td> </tr> <tr> <td data-th="Status"><span>abort</span></td> <td data-th="Description"><span>An update was aborted, but the system is still in its previous state</span></td> </tr> <tr> <td data-th="Status"><span>fail</span></td> <td data-th="Description"><span>An update has thrown an exception and the system\'s state has been compromised</span></td> </tr> </tbody> </table> <h3 id="check"><code>check</code><a href="#check" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Test all loaded modules for updates and, if updates exist, <code>apply</code> them.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot\n  <span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>autoApply<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">outdatedModules</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// outdated modules...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// catch errors</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>The <code>autoApply</code> parameter can either be a boolean or <code>options</code> to pass to the <code>apply</code> method when called.</p> <h3 id="apply"><code>apply</code><a href="#apply" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Continue the update process (as long as <code>module.hot.status() === \'ready\'</code>).</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function">hot</span>\n  <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">outdatedModules</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// outdated modules...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// catch errors</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>The optional <code>options</code> object can include the following properties:</p> <ul> <li><code>ignoreUnaccepted</code> (boolean): Ignore changes made to unaccepted modules.</li> <li><code>ignoreDeclined</code> (boolean): Ignore changes made to declined modules.</li> <li><code>ignoreErrored</code> (boolean): Ignore errors thrown in accept handlers, error handlers and while reevaluating module.</li> <li><code>onDeclined</code> (function(info)): Notifier for declined modules</li> <li><code>onUnaccepted</code> (function(info)): Notifier for unaccepted modules</li> <li><code>onAccepted</code> (function(info)): Notifier for accepted modules</li> <li><code>onDisposed</code> (function(info)): Notifier for disposed modules</li> <li><code>onErrored</code> (function(info)): Notifier for errors</li> </ul> <p>The <code>info</code> parameter will be an object containing some of the following values:</p> <pre><code class="hljs language-js"><span class="token punctuation">{</span>\n  type<span class="token operator">:</span> <span class="token string">\'self-declined\'</span> <span class="token operator">|</span> <span class="token string">\'declined\'</span> <span class="token operator">|</span>\n        <span class="token string">\'unaccepted\'</span> <span class="token operator">|</span> <span class="token string">\'accepted\'</span> <span class="token operator">|</span>\n        <span class="token string">\'disposed\'</span> <span class="token operator">|</span> <span class="token string">\'accept-errored\'</span> <span class="token operator">|</span>\n        <span class="token string">\'self-accept-errored\'</span> <span class="token operator">|</span> <span class="token string">\'self-accept-error-handler-errored\'</span><span class="token punctuation">,</span>\n  moduleId<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// The module in question.</span>\n  dependencyId<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// For errors: the module id owning the accept handler.</span>\n  chain<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// For declined/accepted/unaccepted: the chain from where the update was propagated.</span>\n  parentId<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// For declined: the module id of the declining parent</span>\n  outdatedModules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// For accepted: the modules that are outdated and will be disposed</span>\n  outdatedDependencies<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// For accepted: The location of accept handlers that will handle the update</span>\n    <span class="token number">5</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  error<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// For errors: the thrown error</span>\n  originalError<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// For self-accept-error-handler-errored:</span>\n                                <span class="token comment">// the error thrown by the module before the error handler tried to handle it.</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="addstatushandler"><code>addStatusHandler</code><a href="#addstatushandler" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Register a function to listen for changes in <code>status</code>.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">addStatusHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// React to the current status...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="removestatushandler"><code>removeStatusHandler</code><a href="#removestatushandler" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Remove a registered status handler.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">removeStatusHandler</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> '}}]);